UNZIP=1
CORRECT_VRAM_READS=1
CHEATS=1
2XSAI=1

#Fairly good and special-char-safe descriptor of the os being built on.
OS=`uname -s -r -m|sed \"s/ /-/g\"|tr \"[A-Z]\" \"[a-z]\"|tr \"/()\" \"___\"`
BUILDDIR=.

CPU=i386


FXOBJ=fxinst.o fxemu.o fxdbg.o
FXDEFINES=
FXDEPENDS=c_fx
FXNO_DEPENDS=zsnes_fx


C4OBJ=c4.o c4emu.o
C4DEFINES=
C4DEPENDS=c_c4
C4NO_DEPENDS=zsnes_c4


SOUNDOBJ=spc700.o soundux.o apu.o 
SOUNDDEFINES=-DSPC700_C

CPUOBJ=cpuops.o cpuexec.o sa1cpu.o


PLATFORMOBJ=flash/flash.o

ifdef CHEATS
CHEATOBJ=cheats.o cheats2.o
endif

ifdef 2XSAI
KREEDOBJ=2xsai.o
endif

ifdef SDD1_DECOMP
SDD1OBJ=sdd1emu.o
ifdef SDD1_VERIFY
SDD1DEFINES=-DSDD1_DECOMP -DSDD1_VERIFY
else
SDD1DEFINES=-DSDD1_DECOMP
endif
endif

ifdef CORRECT_VRAM_READS
CORRVRAMDEFINES=-DCORRECT_VRAM_READS
endif

SNAPOBJ = snaporig.o snapshot.o
SCREENSHOTOBJ = screenshot.o
MOVIEOBJ = movie.o

SPC7110OBJ=spc7110.o
OBC1OBJ=obc1.o
SETAOBJ=seta.o seta010.o seta011.o seta018.o

# Create a macro defining (most) source files
OBJECTS=$(CPUOBJ) $(SOUNDOBJ) apudebug.o $(FXOBJ) $(C4OBJ) \
	controls.o crosshairs.o cpu.o sa1.o debug.o sdd1.o tile.o srtc.o gfx.o \
	memmap.o clip.o dsp1.o ppu.o dma.o snes9x.o data.o globals.o reader.o \
	conffile.o bsx.o logger.o \
	$(SPC7110OBJ) $(OBC1OBJ) $(SETAOBJ) $(KREEDOBJ) $(SDD1OBJ) \
	$(CHEATOBJ) $(PLATFORMOBJ) $(SNAPOBJ) $(SCREENSHOTOBJ) $(MOVIEOBJ)


ifdef UNZIP
OBJECTS += loadzip.o unzip/unzip.o unzip/explode.o unzip/unreduce.o unzip/unshrink.o
UNZIPDEFINES=-DUNZIP_SUPPORT
endif

ifdef JMA
OBJECTS += jma/s9x-jma.o jma/7zlzma.o jma/crc32.o jma/iiostrm.o jma/inbyte.o jma/jma.o jma/lzma.o jma/lzmadec.o jma/winout.o
JMADEFINES = -DJMA_SUPPORT
endif

ifdef AIDO
AIDOOBJS = unix/aido.o
AIDODEFINES = -DUSE_AIDO
endif


CCC = g++  -fno-rtti
CC = gcc
NASM = not_found
GASM = g++

DEFS = -DMITSHM

INCLUDES = -I. -Iunzip 

# -o5 => aggressive optimization
OPTIMISE =  -O5 -fomit-frame-pointer -fno-exceptions -Wall -W -Wno-unused-parameter -pipe -DOSX -I/Users/edmcmanus/alchemy/v0.5/avm2-libc/include -I/Users/edmcmanus/alchemy/v0.5/../usr/local/include -L/Users/edmcmanus/alchemy/v0.5/../usr/local/lib -L/Users/edmcmanus/alchemy/v0.5/avm2-libc/lib

# Options we've removed:
# -DNO_INLINE_SET_GET
DEFS += \
-DCPU_SHUTDOWN \
-DSPC700_SHUTDOWN \
$(FXDEFINES) \
$(C4DEFINES) \
$(CPUDEFINES) \
$(SOUNDDEFINES) \
$(UNZIPDEFINES) \
$(JMADEFINES) \
$(AIDODEFINES) \
$(KREEDDEFINES) \
$(SDD1DEFINES) \
$(CORRVRAMDEFINES) \
-DNOASM -DNEW_COLOUR_BLENDING -DHAVE_MKSTEMP -DUSE_DGA_EXTENSION \
-DUSE_VIDMODE_EXTENSION -DHAVE_STRINGS_H -DHAVE_SYS_IOCTL_H -DHAVE_STDINT_H \
'-DACCEPT_SIZE_T=socklen_t' -D__FLASH__

# Note: The NOSOUND directive doesn't actually stop sound emulation. It's used when you don't want to include the UNIX sound driver

CCFLAGS = $(OPTIMISE) $(CPUFLAGS) $(INCLUDES) $(DEFS)

CFLAGS=$(CCFLAGS)

.SUFFIXES: .o .cpp .c .cc .h .m .i .S .asm .obj .O .CPP .C .ASM


# DEFAULT TARGET
all: snes9x


# Dependencies
snes9x: $(OBJECTS) $(AIDOOBJS)
	$(CCC) $(INCLUDES) -o $@ $(OBJECTS) $(AIDOOBJS) $(LDLIBS) -lXxf86dga -lXxf86vm -lsocket -lnsl  -lXext -lX11 $(EXTRALIBS) -lm -swc -O5 -o libSNES9x.swc
	mv libSNES9x.swc ../../../libs/libSNES9x.swc
	growlnotify -m "LibSNES9x Build Complete"

# JMA requires special compile commands? (-fexceptions)
jma/s9x-jma.o: jma/s9x-jma.cpp
	$(CCC) $(INCLUDES) -c $(CCFLAGS) -fexceptions $*.cpp -o $@
jma/7zlzma.o: jma/7zlzma.cpp
	$(CCC) $(INCLUDES) -c $(CCFLAGS) -fexceptions $*.cpp -o $@
jma/crc32.o: jma/crc32.cpp
	$(CCC) $(INCLUDES) -c $(CCFLAGS) -fexceptions $*.cpp -o $@
jma/iiostrm.o: jma/iiostrm.cpp
	$(CCC) $(INCLUDES) -c $(CCFLAGS) -fexceptions $*.cpp -o $@
jma/inbyte.o: jma/inbyte.cpp
	$(CCC) $(INCLUDES) -c $(CCFLAGS) -fexceptions $*.cpp -o $@
jma/jma.o: jma/jma.cpp
	$(CCC) $(INCLUDES) -c $(CCFLAGS) -fexceptions $*.cpp -o $@
jma/lzma.o: jma/lzma.cpp
	$(CCC) $(INCLUDES) -c $(CCFLAGS) -fexceptions $*.cpp -o $@
jma/lzmadec.o: jma/lzmadec.cpp
	$(CCC) $(INCLUDES) -c $(CCFLAGS) -fexceptions $*.cpp -o $@
jma/winout.o: jma/winout.cpp
	$(CCC) $(INCLUDES) -c $(CCFLAGS) -fexceptions $*.cpp -o $@


# Rules for compiling .cpp's into .o's
.cpp.o:
	$(CCC) $(INCLUDES) -c $(CCFLAGS) $*.cpp -o $@

.c.o:
	$(CC) $(INCLUDES) -c $(CCFLAGS) $*.c -o $@

.cpp.S:
	$(GASM) $(INCLUDES) -S $(CCFLAGS) $*.cpp -o $@

.cpp.i:
	$(GASM) $(INCLUDES) -E $(CCFLAGS) $*.cpp -o $@

.S.o:
	$(GASM) $(INCLUDES) -c $(CCFLAGS) $*.S -o $@

.S.i:
	$(GASM) $(INCLUDES) -c -E $(CCFLAGS) $*.S -o $@

.s.o:
	@echo Compiling $*.s
	sh-elf-as -little $*.s -o $@

.asm.o:
	$(NASM) -f elf -DELF $(FXDEFINES) -i. -ii386 -o $@ $*.asm

.obj.o:
	cp $*.obj $*.o

.CPP.O:
	$(CCC) $(INCLUDES) -c $(CCFLAGS) -x c++ $*.CPP -o $@

.C.O:
	$(CC) $(INCLUDES) -c $(CCFLAGS) $*.C -o $@

.ASM.O:
	$(NASM) -f elf -DELF $(FXDEFINES) -i . -i i386 $*.ASM -o $@

clean:
	rm -f $(OBJECTS)


